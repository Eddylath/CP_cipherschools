/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head = new ListNode(0);
        ListNode ptr = head;
        boolean flag = false;
        int store=0;
        outer:while(!flag)
        {
            int smallest = Integer.MAX_VALUE;
            ListNode temp = null;
            for(int i=0;i<lists.length;i++)
            {
                if(lists[i] != null)
                {
                    if(lists[i].val < smallest)
                    {
                        smallest = lists[i].val;
                        temp = lists[i];
                        store = i;
                    }
                }
            }
            if(smallest == Integer.MAX_VALUE)
            {
                flag = true;
                continue outer;
            }
            lists[store] = temp.next;
            temp = new ListNode(smallest);
            ptr.next = temp;
            ptr = ptr.next;
        }
        return head.next;
    }
}
