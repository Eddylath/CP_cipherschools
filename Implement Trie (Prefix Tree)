class Trie {
    int counter = 0;
    class TrieNode
    {
        TrieNode[] charray;
        String s;
        boolean stop;
        public TrieNode()
        {
            charray = new TrieNode[26];
            s = "";
            stop = false;
        }
    }
    TrieNode head;
    
    /** Initialize your data structure here. */
    public Trie() {
        head = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        System.out.println(counter++ + " insert word " + word);
        TrieNode ptr = head;
        for(int i=0;i<word.length();i++)
        {
            if(ptr.charray[word.charAt(i) - 'a'] == null)
            {
                ptr.charray[word.charAt(i) - 'a'] = new TrieNode();
                ptr.charray[word.charAt(i) - 'a'].s = Character.toString(word.charAt(i));
            }
            ptr = ptr.charray[word.charAt(i) - 'a'];
        }
        ptr.stop = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        System.out.println(counter++ + " search word " + word);
        TrieNode ptr = head;
        for(int i=0;i<word.length();i++)
        {
            if(ptr.charray[word.charAt(i) - 'a'] == null)
            {
                return false;
            }
            ptr = ptr.charray[word.charAt(i) - 'a'];
        }
        
        return ptr.stop;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String word) {
        System.out.println(counter++ + " prefix word " + word);
        TrieNode ptr = head;
        for(int i=0;i<word.length();i++)
        {
            if(ptr.charray[word.charAt(i) - 'a'] == null)
            {
                return false;
            }
            ptr = ptr.charray[word.charAt(i) - 'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
