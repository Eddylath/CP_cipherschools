/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null)
            return head;
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = head;
        while(fast!=null && fast.next!=null)
        {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
            //System.out.println(fast+" "+slow.val);
        }
        prev.next = null;
        //System.out.println(head.val+ " "+slow.val);
        ListNode l1 = sortList(head);
        ListNode l2 = sortList(slow);
        //System.out.println(l1.val+ " "+l2.val);
        return merge(l1,l2);
    }
    
    ListNode merge(ListNode l1,ListNode l2)
    {
        //System.out.println(l1.val+ " "+l2.val);
        ListNode list = new ListNode(0);
        ListNode temp = list;
        while(l1!=null && l2!=null)
        {
            if(l1.val <= l2.val)
            {
                temp.next = l1;
                l1 = l1.next;
            }
            else
            {
                temp.next = l2;
                l2 = l2.next;
            }
            temp = temp.next;
            temp.next = null;
        }
        if(l1 != null)
        temp.next = l1;
        if(l2 != null)
        temp.next = l2;
        
        temp = list;
        while(temp!=null)
        {
            //System.out.println(temp.val);
            temp = temp.next;
        }
        //System.out.println();
        return list.next;
    }
}
