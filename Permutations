class Solution {
    public List<List<Integer>> permute(int[] nums) {
        int N = nums.length;
        List<List<Integer>> list = new ArrayList<>();
        int[] temp = new int[N];
        Arrays.fill(temp,Integer.MAX_VALUE);
        boolean[] flag = new boolean[N];
        calling(list,nums,temp,0,N,flag);
        return list;
    }
    
    void calling(List<List<Integer>> list,int[] nums,int[] temp,int iter,int N,boolean[] flag)
    {
        if(temp[N-1] != Integer.MAX_VALUE)
        {
            list.add(new ArrayList<>());
            for(int l:temp)
                list.get(list.size()-1).add(l);
            return;
        }
        
        for(int i=0;i<N;i++)
        {
            if(!flag[i])
            {
                temp[iter] = nums[i];
                flag[i] = true;
                calling(list,nums,temp,iter+1,N,flag);
                temp[iter] = Integer.MAX_VALUE;
                flag[i] = false;
            }
        }
    }
}
