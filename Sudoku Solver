  class Solution {
    public void solveSudoku(char[][] board) {
        ArrayList<String> list = findingmissing(board);
        System.out.println(list);
        backtrack(list,0,board);
    }
    
    
    public ArrayList<String> findingmissing(char[][] board)
    {
        ArrayList<String> list = new ArrayList<>();
        for(int i=0;i<9;i++)
        {
            for(int j=0;j<9;j++)
            {
                if(board[i][j] == '.')
                    list.add(Integer.toString(i)+" "+Integer.toString(j));
            }
        }
        return list;
    }
    
    public boolean backtrack(ArrayList<String> list,int iter,char[][] board)
    {
        if(iter == list.size())
            return true;
        int i = Character.getNumericValue(list.get(iter).charAt(0));
        int j = Character.getNumericValue(list.get(iter).charAt(2));
        boolean a = false;
        for(char ch='1';ch<='9';ch++)
        {
            board[i][j] = ch;
            if(isSafe(board,i,j,ch))
            {
                a = backtrack(list,iter+1,board);
                if(a)
                    return true;
            }
            board[i][j] = '.';
        }
        return false;
    }
    
    public boolean isSafe(char[][] board,int i,int j,char ch)
    {
        int count = 0;
        System.out.println(i+" "+j+" "+ch);
        for(int col=0;col<9;col++)
        {
            if(board[i][col] == ch)
            {
                if(count == 0)
                    count++;
                else
                    return false;
            }
        }
        
        for(int row=0;row<9;row++)
        {
            if(board[row][j] == ch)
            {
                if(count == 1)
                    count++;
                else
                    return false;
            }
        }
        
        int a = -1,b = -1;
        if(i>=0 && i<3 && j>=0 && j<3)
        {
            a = 0;
            b = 0;
        }
        if(i>=0 && i<3 && j>=3 && j<6)
        {
            a = 0;
            b = 3;
        }
        if(i>=0 && i<3 && j>=6 && j<9)
        {
            a = 0;
            b = 6;
        }
        if(i>=3 && i<6 && j>=0 && j<3)
        {
            a = 3;
            b = 0;
        }
        if(i>=3 && i<6 && j>=3 && j<6)
        {
            a = 3;
            b = 3;
        }
        if(i>=3 && i<6 && j>=6 && j<9)
        {
            a = 3;
            b = 6;
        }
        if(i>=6 && i<9 && j>=0 && j<3)
        {
            a = 6;
            b = 0;
        }
        if(i>=6 && i<9 && j>=3 && j<6)
        {
            a = 6;
            b = 3;
        }
        if(i>=6 && i<9 && j>=6 && j<9)
        {
            a = 6;
            b = 6;
        }
        
        for(int l=a;l<a+3;l++)
        {
            for(int m=b;m<b+3;m++)
            {
                if(board[l][m] == ch)
                {
                    if(count == 2)
                       count++;
                    else
                       return false;
                }
            }
        }
        return true;
    }
}
